import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{r as i,o as p,c as l,a as n,d as t,F as c,e as s,b as e}from"./app.7889e42c.js";const r={},d=s('<p>Compose \u4F1A\u901A\u8FC7\u51E0\u4E2A\u4E0D\u540C\u7684\u201C\u9636\u6BB5\u201D\u6765\u6E32\u67D3\u5E27\u3002\u5982\u679C\u6211\u4EEC\u89C2\u5BDF\u4E00\u4E0B Android View \u7CFB\u7EDF\uFF0C\u5C31\u4F1A\u53D1\u73B0\u5B83\u6709 3 \u4E2A\u4E3B\u8981\u9636\u6BB5\uFF1A\u6D4B\u91CF\u3001\u5E03\u5C40\u548C\u7ED8\u5236\u3002Compose \u548C\u5B83\u975E\u5E38\u76F8\u4F3C\uFF0C\u4F46\u5F00\u5934\u591A\u4E86\u4E00\u4E2A\u53EB\u505A\u201C\u7EC4\u5408\u201D\u7684\u91CD\u8981\u9636\u6BB5\u3002</p><h2 id="\u8BF4\u660E" tabindex="-1"><a class="header-anchor" href="#\u8BF4\u660E" aria-hidden="true">#</a> \u8BF4\u660E</h2><p>\u7531\u4E8E\u7FFB\u8BD1\u5F88\u591A\u5730\u65B9\u5B58\u5728\u6982\u5FF5\u96BE\u4EE5\u8BB2\u660E\u7684\u95EE\u9898\uFF0C\u4E14\u7FFB\u8BD1\u540E\uFF0C\u5176\u5B9E\u4E5F\u4F1A\u65E0\u5F62\u4E2D\u7ED9\u5B66\u4E60\u5148\u8FDB\u7684Android\u6280\u672F\u9020\u6210\u8BED\u8A00\u58C1\u5792\uFF0C\u6240\u4EE5\uFF0C\u5728\u4E4B\u540E\u7684\u6587\u7AE0\u91CC\uFF0C\u5982\u679C\u662F\u5B98\u7F51\u4E2D\u6587\u7FFB\u8BD1\u4E0D\u662F\u5F88\u597D\u7684\u6587\u7AE0\uFF0C\u5219\u91C7\u7528<strong>\u82F1\u6587\u4E3A\u4E3B\uFF0C\u4E2D\u6587\u89E3\u91CA\u4E3A\u8F85</strong>\u7684\u65B9\u5F0F\u8FDB\u884C\u7EC4\u7EC7\u7F16\u5199</p><h2 id="the-three-phases-of-frame" tabindex="-1"><a class="header-anchor" href="#the-three-phases-of-frame" aria-hidden="true">#</a> The three phases of frame</h2><ul><li><p>Compose has three main phases:</p><ul><li><strong>Composition</strong>\uFF08\u7EC4\u5408\uFF09: <em>What</em> UI to show. Compose runs composable functions and creates a description of your UI.</li><li><strong>Layout</strong>\uFF08\u5E03\u5C40\uFF09: <em>Where</em> to place UI. This phase consists of two steps: measurement and placement. Layout elements measure and place themselves and any child elements in 2D coordinates, for each node in the layout tree.</li><li><strong>Drawing</strong>\uFF08\u7ED8\u5236\uFF09: <em>How</em> it renders. UI elements draw into a Canvas, usually a device screen.</li></ul></li><li><p>\u4E0B\u9762\u7ED9\u51FA\u51E0\u4E2A phases \u7684\u6267\u884C\u987A\u5E8F\u56FE\uFF1AAllowing data to flow in one direction from composition to layout to drawing to produce a frame</p><p><img src="https://raw.githubusercontent.com/CoderWDD/myImages/main/blog_images/phases-3-phases.svg" alt="phases-3-phases" loading="lazy"></p></li><li><p>Principle: <strong>Compose performs only the minimum amount of work required to update the UI.</strong></p></li></ul><h2 id="state-reads" tabindex="-1"><a class="header-anchor" href="#state-reads" aria-hidden="true">#</a> State reads</h2><p>State is commonly created using <code>mutableStateOf()</code> and then accessed through one of two ways: by directly accessing the <code>value</code> property, or alternatively by using a Kotlin property delegate. For the purposes of this guide, a &quot;state read&quot; refers to either of those equivalent access methods.</p>',7),u=s(`<li><p><code>mutableStateOf</code>:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// State read without property delegate.</span>
<span class="token keyword">val</span> paddingState<span class="token operator">:</span> MutableState<span class="token operator">&lt;</span>Dp<span class="token operator">&gt;</span> <span class="token operator">=</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">Text</span><span class="token punctuation">(</span>
    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span>
    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>paddingState<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),h=s(`<p><code>property delegate</code>:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// State read with property delegate.</span>
<span class="token keyword">var</span> padding<span class="token operator">:</span> Dp <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">Text</span><span class="token punctuation">(</span>
    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span>
    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m=e("Under the hood of the "),k={href:"https://kotlinlang.org/docs/delegated-properties.html",target:"_blank",rel:"noopener noreferrer"},f=e("property delegate"),v=e(', "getter" and "setter" functions are used to access and update the State\u2019s '),g=n("code",null,"value",-1),b=e(". These getter and setter functions are only invoked when you reference the property as a value, and not when it is created, which is why the two ways above are equivalent."),w=s(`<p>Notice: Each block of code that can be re-executed when a read state changes is a <em>restart scope</em>. Compose keeps track of state value changes and restart scopes in different phases.</p><h2 id="phased-state-reads" tabindex="-1"><a class="header-anchor" href="#phased-state-reads" aria-hidden="true">#</a> Phased state reads</h2><p>As mentioned above, there are three main phases in Compose, and Compose tracks what state is read within each of them. <strong>This allows Compose to notify only the specific phases that need to perform work for each affected element of your UI.</strong></p><p>\u4E0B\u9762\u4ECB\u7ECD\u6BCF\u4E2A phase \u5728 read state \u65F6\u90FD\u53D1\u751F\u4E86\u4EC0\u4E48</p><h3 id="phase-1-composition" tabindex="-1"><a class="header-anchor" href="#phase-1-composition" aria-hidden="true">#</a> Phase 1: Composition</h3><p>State reads within a <code>@Composable</code> function or lambda block affect composition and potentially the subsequent phases. When the state value changes, the recomposer schedules reruns of all the composable functions which read that state value.</p><p>Depending on the result of composition, Compose UI runs the layout and drawing phases. It might skip these phases if the content remains the same and the size and the layout won&#39;t change.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> padding <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">Text</span><span class="token punctuation">(</span>
    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span>
    <span class="token comment">// The \`padding\` state is read in the composition phase</span>
    <span class="token comment">// when the modifier is constructed.</span>
    <span class="token comment">// Changes in \`padding\` will invoke recomposition.</span>
    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note:</strong> Where a state instance is created and stored has little bearing on the phases, it only matters when and where a state value is <strong>read</strong>.</p><h3 id="phase-2-layout" tabindex="-1"><a class="header-anchor" href="#phase-2-layout" aria-hidden="true">#</a> Phase 2: Layout</h3><ul><li><p>The layout phase consists of two steps: <em>measurement</em> and <em>placement</em>.</p><ul><li><strong>measurement</strong>: The measurement step runs the measure lambda passed to the <code>Layout</code> composable, the <code>MeasureScope.measure</code> method of the <code>LayoutModifier</code> interface, and so on.</li><li><strong>placement</strong>: The placement step runs the placement block of the <code>layout</code> function, the lambda block of <code>Modifier.offset { \u2026 }</code>, and so on.</li></ul></li><li><p>State reads during each of these steps affect the layout and potentially the drawing phase. When the state value changes, Compose UI schedules the layout phase. It also runs the drawing phase if size or position has changed.</p></li><li><p>To be more precise, the measurement step and the placement step have separate restart scopes, meaning that state reads in the placement step don&#39;t re-invoke the measurement step before that. However, these two steps are often intertwined, so a state read in the placement step can affect other restart scopes that belong to the measurement step.</p></li></ul><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> offsetX <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">Text</span><span class="token punctuation">(</span>
    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span>
    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">offset</span> <span class="token punctuation">{</span>
        <span class="token comment">// The \`offsetX\` state is read in the placement step</span>
        <span class="token comment">// of the layout phase when the offset is calculated.</span>
        <span class="token comment">// Changes in \`offsetX\` restart the layout.</span>
        <span class="token function">IntOffset</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">.</span><span class="token function">roundToPx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="phase-3-drawing" tabindex="-1"><a class="header-anchor" href="#phase-3-drawing" aria-hidden="true">#</a> Phase 3: Drawing</h3><p>State reads during drawing code affect the drawing phase. Common examples include <code>Canvas()</code>, <code>Modifier.drawBehind</code>, and <code>Modifier.drawWithContent</code>. When the state value changes, Compose UI runs only the draw phase.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> color <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">Canvas</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> modifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The \`color\` state is read in the drawing phase</span>
    <span class="token comment">// when the canvas is rendered.</span>
    <span class="token comment">// Changes in \`color\` restart the drawing.</span>
    <span class="token function">drawRect</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u9762\u7ED9\u51FA\u4E09\u4E2A\u9636\u6BB5\u5206\u522B\u8FDB\u884C\u7684\u64CD\u4F5C\u6982\u89C8\u56FE\uFF1A</p><p><img src="https://raw.githubusercontent.com/CoderWDD/myImages/main/blog_images/phases-state-read-draw.svg" alt="phases-state-read-draw" loading="lazy"></p><h2 id="optimizing-state-reads" tabindex="-1"><a class="header-anchor" href="#optimizing-state-reads" aria-hidden="true">#</a> Optimizing state reads</h2>`,18),y=s(`<p>\u5F15\u5165\uFF1ALet\u2019s take a look at an example. Here we have an <code>Image()</code> which uses the offset modifier to offset its final layout position, resulting in a parallax effect as the user scrolls.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>Box <span class="token punctuation">{</span>
    <span class="token keyword">val</span> listState <span class="token operator">=</span> <span class="token function">rememberLazyListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">Image</span><span class="token punctuation">(</span>
        <span class="token comment">// Non-optimal implementation!</span>
        Modifier<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>
            <span class="token function">with</span><span class="token punctuation">(</span>LocalDensity<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// State read of firstVisibleItemScrollOffset in composition</span>
                <span class="token punctuation">(</span>listState<span class="token punctuation">.</span>firstVisibleItemScrollOffset <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token function">LazyColumn</span><span class="token punctuation">(</span>state <span class="token operator">=</span> listState<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_=e("This code works, but results in nonoptimal performance. As written, the code reads the value of the "),x=n("code",null,"firstVisibleItemScrollOffset",-1),C=e(" state and passes it to the "),S={href:"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#(androidx.compose.ui.Modifier).offset(androidx.compose.ui.unit.Dp,androidx.compose.ui.unit.Dp)",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"Modifier.offset(offset: Dp)",-1),T=e(" function. As the user scrolls the "),D=n("code",null,"firstVisibleItemScrollOffset",-1),M=e(" value will change. As we know, Compose tracks any state reads so that it can restart (re-invoke) the reading code, which in our example is the content of the "),q=n("code",null,"Box",-1),z=e("."),O=n("p",null,[e("This is an example of state being read within the "),n("strong",null,"composition"),e(" phase. This is not necessarily a bad thing at all, and in fact is the basis of recomposition, allowing data changes to emit new UI.")],-1),L=n("p",null,[e("In this example though it is nonoptimal, because every scroll event will result in the entire composable content being reevaluated, and then also measured, laid out and finally drawn. We\u2019re triggering the Compose phase on every scroll even though "),n("strong",null,"what"),e(" we are showing hasn\u2019t changed, only "),n("strong",null,"where"),e(" it is shown. We can optimize our state read to only re-trigger the layout phase.")],-1),P=e("There is another version of the offset modifier available: "),H={href:"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#(androidx.compose.ui.Modifier).offset(kotlin.Function1)",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"Modifier.offset(offset: Density.() -> IntOffset)",-1),W=e("."),V=s(`<p>This version takes a lambda parameter, where the resulting offset is returned by the lambda block. Let\u2019s update our code to use it:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>Box <span class="token punctuation">{</span>
    <span class="token keyword">val</span> listState <span class="token operator">=</span> <span class="token function">rememberLazyListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">Image</span><span class="token punctuation">(</span>
        Modifier<span class="token punctuation">.</span><span class="token function">offset</span> <span class="token punctuation">{</span>
            <span class="token comment">// State read of firstVisibleItemScrollOffset in Layout</span>
            <span class="token function">IntOffset</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> listState<span class="token punctuation">.</span>firstVisibleItemScrollOffset <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>

    <span class="token function">LazyColumn</span><span class="token punctuation">(</span>state <span class="token operator">=</span> listState<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So why is this more performant? The lambda block we provide to the modifier is invoked during the <strong>layout</strong> phase (specifically, during the layout phase&#39;s placement step), meaning that our <code>firstVisibleItemScrollOffset</code> state is no longer read during composition. Because Compose tracks when state is read, this change means that if the <code>firstVisibleItemScrollOffset</code> value changes, Compose only has to restart the layout and drawing phases.\uFF08\u5373\u53EA\u9700\u8981\u91CD\u65B0\u8FDB\u884C\u5E03\u5C40\u3001\u7ED8\u5236\u9636\u6BB5\u5373\u53EF\uFF0C\u4ECE\u800C\u7701\u7565\u7EC4\u5408\u9636\u6BB5\uFF09</p>`,3),A=s(`<h2 id="recomposition-loop-cyclic-phase-dependency" tabindex="-1"><a class="header-anchor" href="#recomposition-loop-cyclic-phase-dependency" aria-hidden="true">#</a> Recomposition loop (cyclic phase dependency)</h2><ul><li><p>\u5F15\u5165\uFF1AEarlier we mentioned that the phases of Compose are always invoked in the same order, and that there is no way to go backwards while in the same frame. However, that doesn\u2019t prohibit apps getting into composition loops across <em>different</em> frames. Consider this example:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>Box <span class="token punctuation">{</span>
    <span class="token keyword">var</span> imageHeightPx <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token function">Image</span><span class="token punctuation">(</span>
        painter <span class="token operator">=</span> <span class="token function">painterResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">,</span>
        contentDescription <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;I&#39;m above the text&quot;</span></span><span class="token punctuation">,</span>
        modifier <span class="token operator">=</span> Modifier
            <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">onSizeChanged</span> <span class="token punctuation">{</span> size <span class="token operator">-&gt;</span>
                <span class="token comment">// Don&#39;t do this</span>
                imageHeightPx <span class="token operator">=</span> size<span class="token punctuation">.</span>height
            <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>

    <span class="token function">Text</span><span class="token punctuation">(</span>
        text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;I&#39;m below the image&quot;</span></span><span class="token punctuation">,</span>
        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>
            top <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>LocalDensity<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span> imageHeightPx<span class="token punctuation">.</span><span class="token function">toDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here we have (badly) implemented a vertical column, with the image at the top, and then the text below it. We\u2019re using <code>Modifier.onSizeChanged()</code> to know the resolved size of the image, and then using <code>Modifier.padding()</code> on the text to shift it down. The unnatural conversion from <code>Px</code> back to <code>Dp</code> already indicates that the code has some issue.</p><p>The issue with this example is that we don\u2019t arrive at the &quot;final&quot; layout within a single frame. The code relies on multiple frames happening, which performs unnecessary work, and results in UI jumping around on screen for the user.</p><p>Let\u2019s step through each frame to see what is happening:</p><p>At the composition phase of the first frame, <code>imageHeightPx</code> has a value of 0, and the text is provided with <code>Modifier.padding(top = 0)</code>. Then, the layout phase follows, and the callback for the <code>onSizeChanged</code> modifier is called. This is when the <code>imageHeightPx</code> is updated to the actual height of the image. Compose schedules recomposition for the next frame. At the drawing phase, the text is rendered with the padding of 0 since the value change is not reflected yet.</p><p>Compose then starts the second frame scheduled by the value change of <code>imageHeightPx</code>. The state is read in the Box content block, and it is invoked in the composition phase. This time, the text is provided with a padding matching the image height. At the layout phase, the code does set the value of <code>imageHeightPx</code> again, but no recomposition is scheduled since the value remains the same.</p><p>In the end, we get the desired padding on the text, but it is nonoptimal to spend an extra frame to pass the padding value back to a different phase and will result in producing a frame with overlapping content.</p><p><img src="https://raw.githubusercontent.com/CoderWDD/myImages/main/blog_images/phases-recomp-loop.svg" alt="phases-recomp-loop" loading="lazy"></p></li><li><p>This example may seem contrived, but be careful of this general pattern:</p><ul><li><p><code>Modifier.onSizeChanged()</code>, <code>onGloballyPositioned()</code>, or some other layout operations</p></li><li><p>Update some state</p></li><li><p>Use that state as input to a layout modifier (<code>padding()</code>,<code>height()</code>, or similar)</p></li><li><p>Potentially repeat</p></li></ul></li><li><p>Principle: The general principle here is to have a single source of truth for multiple UI elements that should be measured and placed with regards to one another. Using a proper layout primitive or creating a custom layout means that the minimal shared parent serves as the source of truth that can coordinate the relation between multiple elements.</p></li></ul><h2 id="\u53C2\u8003\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u8D44\u6599" aria-hidden="true">#</a> \u53C2\u8003\u8D44\u6599</h2>`,3),B=e("\u7EDD\u5927\u591A\u6570\u6765\u81EA"),N={href:"https://developer.android.com/jetpack/compose/phases",target:"_blank",rel:"noopener noreferrer"},E=e("\u5B98\u65B9\u6587\u6863 - \u82F1\u6587\u539F\u7248");function R(F,X){const a=i("ExternalLinkIcon");return p(),l(c,null,[d,n("ul",null,[u,n("li",null,[h,n("p",null,[m,n("a",k,[f,t(a)]),v,g,b])])]),w,n("ul",null,[n("li",null,[y,n("p",null,[_,x,C,n("a",S,[I,t(a)]),T,D,M,q,z]),O,L,n("p",null,[P,n("a",H,[U,t(a)]),W]),V])]),A,n("ul",null,[n("li",null,[B,n("a",N,[E,t(a)])])])],64)}var K=o(r,[["render",R],["__file","Compose\u4E2D\u7684\u9636\u6BB5.html.vue"]]);export{K as default};
