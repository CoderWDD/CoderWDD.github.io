import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as p,c as i,a as n,e as t,F as c,d as a,b as s}from"./app.a7cb93c1.js";const r={},d=a(`<h1 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h1><h2 id="\u6570\u636E\u5E93\u4E2D\u5BF9\u8C61\u7684\u547D\u540D\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u5E93\u4E2D\u5BF9\u8C61\u7684\u547D\u540D\u673A\u5236" aria-hidden="true">#</a> \u6570\u636E\u5E93\u4E2D\u5BF9\u8C61\u7684\u547D\u540D\u673A\u5236</h2><p><code>ServerName.DatabaeName.SchemaName.TableName</code></p><p>\u6BCF\u4E00\u5C42\u4E4B\u95F4\u6709\u5305\u542B\u5173\u7CFB\uFF0C\u5373\u6A21\u5F0F\u5305\u542B\u8868\uFF0C\u6570\u636E\u5E93\u5305\u62EC\u6A21\u5F0F\uFF0C\u6570\u636E\u5E93\u670D\u52A1\u5668\u5305\u542B\u6570\u636E\u5E93</p><h2 id="sql\u547D\u4EE4\u8868" tabindex="-1"><a class="header-anchor" href="#sql\u547D\u4EE4\u8868" aria-hidden="true">#</a> SQL\u547D\u4EE4\u8868</h2><table><thead><tr><th style="text-align:center;">SQL\u529F\u80FD</th><th style="text-align:center;">\u547D\u4EE4</th></tr></thead><tbody><tr><td style="text-align:center;">\u6570\u636E\u67E5\u8BE2</td><td style="text-align:center;">SELECT</td></tr><tr><td style="text-align:center;">\u6570\u636E\u5B9A\u4E49</td><td style="text-align:center;">CREATE\u3001DROP\u3001ALTER</td></tr><tr><td style="text-align:center;">\u6570\u636E\u4FEE\u6539</td><td style="text-align:center;">INSERT\u3001UPDATE\u3001DELETE</td></tr><tr><td style="text-align:center;">\u6570\u636E\u63A7\u5236</td><td style="text-align:center;">GRANT\u3001REVOKE</td></tr></tbody></table><h2 id="\u6A21\u5F0F-schema" tabindex="-1"><a class="header-anchor" href="#\u6A21\u5F0F-schema" aria-hidden="true">#</a> \u6A21\u5F0F\uFF08Schema\uFF09</h2><ul><li><p>\u5B9A\u4E49\uFF1A\u8868\u793A\u4E00\u4E2A\u72EC\u7ACB\u7684\uFF08\u62BD\u8C61\uFF09\u7A7A\u95F4\uFF0C\u5176\u53EF\u4EE5\u5305\u542B\u8BF8\u5982\u8868\u3001\u89C6\u56FE\u3001\u5B58\u50A8\u8FC7\u7A0B\u7B49\u6570\u636E\u5E93\u5BF9\u8C61\uFF0C\u4EE5\u8868\u793A\u8FD9\u4E9B\u6570\u636E\u5E93\u5BF9\u8C61\u7684\u6709\u6548\u8FB9\u754C\u3002\u6A21\u5F0F\u7684\u6240\u6709\u8005\u901A\u5E38\u662F\u6570\u636E\u5E93\u7528\u6237\uFF0C\u4E5F\u53EF\u4EE5\u662F\u6570\u636E\u5E93\u89D2\u8272\u6216\u5E94\u7528\u7A0B\u5E8F\u89D2\u8272\u3002</p></li><li><p>\u521B\u5EFA\u6A21\u5F0F\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> <span class="token operator">&lt;</span>\u6A21\u5F0F\u540D<span class="token operator">&gt;</span> <span class="token keyword">AUTHORIZATION</span> <span class="token operator">&lt;</span>\u7528\u6237\u540D<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u5220\u9664\u6A21\u5F0F\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">SCHEMA</span> <span class="token operator">&lt;</span>\u6A21\u5F0F\u540D<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token keyword">CASCADE</span><span class="token operator">|</span><span class="token keyword">RESTRICT</span><span class="token operator">&gt;</span>

<span class="token keyword">CASCADE</span><span class="token punctuation">(</span>\u7EA7\u8054<span class="token punctuation">)</span>\uFF1A\u5220\u9664\u6A21\u5F0F\u7684\u540C\u65F6\u628A\u8BE5\u6A21\u5F0F\u4E2D\u6240\u6709\u7684\u6570\u636E\u5E93\u5BF9\u8C61\u5168\u90E8\u5220\u9664\uFF1B
<span class="token keyword">RESTRICT</span><span class="token punctuation">(</span>\u9650\u5236<span class="token punctuation">)</span>\uFF1A\u5982\u679C\u8BE5\u6A21\u5F0F\u4E2D\u5B9A\u4E49\u4E86\u4E0B\u5C5E\u7684\u6570\u636E\u5E93\u5BF9\u8C61\uFF08\u5982\u8868\u3001\u89C6\u56FE\u7B49\uFF09\uFF0C\u5219\u62D2\u7EDD\u8BE5\u5220\u9664\u8BED\u53E5\u7684\u6267\u884C\u3002\u5373\u5F53\u8BE5\u6A21\u5F0F\u4E2D\u6CA1\u6709\u4EFB\u4F55\u4E0B\u5C5E\u5BF9\u8C61\u65F6\uFF0C \u624D\u53EF\u4EE5\u5220\u9664\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u7406\u89E3\uFF1A\u5B9A\u4E49\u6A21\u5F0F\u5B9E\u9645\u4E0A\u5B9A\u4E49\u4E86\u4E00\u4E2A<strong>\u547D\u540D\u7A7A\u95F4</strong></p></li><li><p>\u6A21\u5F0F\u4E0E\u57FA\u672C\u8868\u7684\u5173\u7CFB\uFF1A\u6BCF\u4E00\u4E2A\u57FA\u672C\u8868\u90FD\u5C5E\u4E8E\u67D0\u4E00\u4E2A\u6A21\u5F0F\uFF0C\u4E00\u4E2A\u6A21\u5F0F\u5305\u542B\u591A\u4E2A\u57FA\u672C\u8868</p></li></ul><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySql</h2><h3 id="\u57FA\u672C\u8BED\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u8BED\u6CD5" aria-hidden="true">#</a> \u57FA\u672C\u8BED\u6CD5</h3>`,10),u=a(`<li><p>\u4FEE\u6539\u8868\u540D\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> \u65E7\u8868\u540D <span class="token keyword">RENAME</span> \u65B0\u8868\u540D<span class="token punctuation">;</span>
eg\uFF1A<span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">rename</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u67E5\u770B\u6570\u636E\u5E93\u4E2D\u7684\u6240\u6709\u8868\u7ED3\u6784\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u67E5\u770B\u8868\u7684\u57FA\u672C\u7ED3\u6784\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DESC</span> TABLENAME<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u4FEE\u6539\u8868\u4E2D\u5C5E\u6027\u540D\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> \u8868\u540D CHANGE \u65E7\u5C5E\u6027\u540D \u65B0\u5C5E\u6027\u540D \u65B0\u6570\u636E\u7C7B\u578B  <span class="token punctuation">;</span>
<span class="token comment">// \u5982\u679C\u4E0D\u9700\u8981\u4FEE\u6539\u5C5E\u6027\u7684\u6570\u636E\u7C7B\u578B\uFF0C\u53EF\u4EE5\u628A\u65B0\u5B57\u6BB5\u7684\u6570\u636E\u7C7B\u578B\u8BBE\u7F6E\u4E3A\u548C\u539F\u6765\u4E00\u6837\uFF0C\u4F46\u662F\uFF01\u5343\u4E07\u4E0D\u8981\u7A7A\u7740\u5B83\uFF01</span>
eg\uFF1A<span class="token keyword">alter</span> <span class="token keyword">table</span> student change id stuid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u4FEE\u6539\u5C5E\u6027\u7684\u6570\u636E\u7C7B\u578B\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> \u8868\u540D <span class="token keyword">MODIFY</span> \u5B57\u6BB5\u540D \u6570\u636E\u7C7B\u578B<span class="token punctuation">;</span>
eg\uFF1A<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> Name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u6DFB\u52A0\u5C5E\u6027\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> \u8868\u540D <span class="token keyword">ADD</span> \u65B0\u5C5E\u6027\u540D \u6570\u636E\u7C7B\u578B <span class="token punctuation">[</span>\u7EA6\u675F\u6761\u4EF6<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span><span class="token punctuation">]</span> \u5DF2\u5B58\u5728\u5C5E\u6027\u540D<span class="token punctuation">;</span>

eg\uFF1A<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;\u7537&#39;</span> <span class="token keyword">after</span> Name<span class="token punctuation">;</span>

MySQL \u4E2D\u5E38\u7528\u7684\u7EA6\u675F:
<span class="token operator">NOT</span> <span class="token boolean">NULL</span> \u7EA6\u675F\uFF1A\u786E\u4FDD\u67D0\u5217\u4E0D\u80FD\u6709 <span class="token boolean">NULL</span> \u503C\u3002
<span class="token keyword">DEFAULT</span> \u7EA6\u675F\uFF1A\u5F53\u67D0\u5217\u6CA1\u6709\u6307\u5B9A\u503C\u65F6\uFF0C\u4E3A\u8BE5\u5217\u63D0\u4F9B\u9ED8\u8BA4\u503C\u3002
<span class="token keyword">UNIQUE</span> \u7EA6\u675F\uFF1A\u786E\u4FDD\u67D0\u5217\u4E2D\u7684\u6240\u6709\u503C\u662F\u4E0D\u540C\u7684\u3002
<span class="token keyword">PRIMARY</span> <span class="token keyword">Key</span> \u7EA6\u675F\uFF1A\u552F\u4E00\u6807\u8BC6\u6570\u636E\u5E93\u8868\u4E2D\u7684\u5404\u884C<span class="token operator">/</span>\u8BB0\u5F55\u3002
<span class="token keyword">CHECK</span> \u7EA6\u675F\uFF1A<span class="token keyword">CHECK</span> \u7EA6\u675F\u786E\u4FDD\u67D0\u5217\u4E2D\u7684\u6240\u6709\u503C\u6EE1\u8DB3\u4E00\u5B9A\u6761\u4EF6\u3002

\u4E0D\u505A<span class="token punctuation">[</span><span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span><span class="token punctuation">]</span>\u7684\u4F4D\u7F6E\u8BF4\u660E\uFF0C\u5728\u6DFB\u52A0\u5C5E\u6027\u65F6MySQL\u4F1A\u9ED8\u8BA4\u628A\u65B0\u5C5E\u6027\u52A0\u5165\u5230\u8868\u7684\u6700\u540E\u4E00\u5217\u3002

\u5982\u679C\u6211\u4EEC\u60F3\u5728\u7B2C\u4E00\u5217\u6DFB\u52A0\u65B0\u7684\u5C5E\u6027\uFF0C\u53EA\u9700\u505A<span class="token keyword">FIRST</span>\u7684\u4F4D\u7F6E\u8BF4\u660E\u3002
\u5982\u679C\u6211\u4EEC\u60F3\u5728\u67D0\u4E00\u5217\u540E\u9762\u6DFB\u52A0\u65B0\u7684\u5C5E\u6027\uFF0C\u53EA\u9700\u505A<span class="token keyword">AFTER</span>\u7684\u4F4D\u7F6E\u8BF4\u660E\uFF0C\u7136\u540E\u6CE8\u660E\u4F60\u60F3\u8BA9\u5B83\u6DFB\u52A0\u5728\u54EA\u4E2A\u5C5E\u6027\u7684\u540E\u9762\u5373\u53EF\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u5220\u9664\u5B57\u6BB5\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> \u8868\u540D <span class="token keyword">DROP</span> \u5B57\u6BB5\u540D<span class="token punctuation">;</span>
eg\uFF1A<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> Salary<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u5411\u8868\u4E2D\u63D2\u5165\u6570\u636E\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> \u8868\u540D <span class="token punctuation">(</span>\u5C5E\u6027\u540D<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>\u5185\u5BB9<span class="token punctuation">)</span><span class="token punctuation">;</span>
eg\uFF1A<span class="token keyword">insert</span> <span class="token keyword">into</span> product <span class="token punctuation">(</span>maker<span class="token punctuation">,</span>model<span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span><span class="token number">6009</span><span class="token punctuation">,</span><span class="token string">&#39;laptop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u4ECE\u9017\u53F7\u5206\u9694\u7684\u6587\u4EF6\u4E2D\u8BFB\u53D6\u6240\u6709\u6570\u636E\u63D2\u5165\u8868\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> <span class="token keyword">INFILE</span> <span class="token string">&#39;\u6587\u4EF6\u540D&#39;</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> \u8868\u540D <span class="token keyword">character</span> <span class="token keyword">set</span> gbk <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span> <span class="token punctuation">;</span>
eg\uFF1A<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">&#39;src1/step1/product.csv&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> product <span class="token keyword">character</span> <span class="token keyword">set</span> gbk <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u5220\u9664\u6570\u636E\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
eg\uFF1A<span class="token keyword">delete</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> length<span class="token punctuation">(</span>maker<span class="token punctuation">)</span> <span class="token operator">!=</span> char_length<span class="token punctuation">(</span>maker<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5220\u9664\u8868\u4E2Dmaker\u5C5E\u6027\u542B\u6709\u4E2D\u6587\u7684\u6570\u636E</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u4FEE\u6539\u6570\u636E\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">UPDATE</span>  \u8868\u540D
<span class="token keyword">SET</span> \u5B57\u6BB5\u540D<span class="token number">1</span> <span class="token operator">=</span> \u5185\u5BB9<span class="token number">1</span><span class="token punctuation">,</span>  \u5B57\u6BB5\u540D<span class="token number">2</span> <span class="token operator">=</span>  \u5185\u5BB9<span class="token number">2</span><span class="token punctuation">,</span> \u5B57\u6BB5\u540D<span class="token number">3</span> <span class="token operator">=</span>  \u5185\u5BB9<span class="token number">3</span>
<span class="token keyword">WHERE</span> \u8FC7\u6EE4\u6761\u4EF6<span class="token punctuation">;</span>

eg\uFF1A<span class="token keyword">update</span> product <span class="token keyword">set</span> maker<span class="token operator">=</span><span class="token string">&#39;JD&#39;</span> <span class="token keyword">where</span> maker<span class="token operator">=</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u96C6\u5408\u5E76\u64CD\u4F5C\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> R <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> S<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u96C6\u5408\u4EA4\u64CD\u4F5C\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> R <span class="token keyword">intersect</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> S<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u96C6\u5408\u5DEE\u64CD\u4F5C\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> R <span class="token keyword">except</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> S<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u67E5\u627E\u6307\u5B9A\u6570\u91CF\u7684\u8BB0\u5F55\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> \u8868\u540D <span class="token keyword">LIMIT</span> \u6307\u5B9A\u6570\u91CF<span class="token punctuation">;</span>

eg\uFF1A
	<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country<span class="token operator">=</span><span class="token string">&#39;Germany&#39;</span> <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u53D6MIN\u3001MAX</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
eg\uFF1A
	<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span> <span class="token keyword">AS</span> SmallestPrice <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
	<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span> <span class="token keyword">AS</span> LargestPrice <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u7EDF\u8BA1\u4E2A\u6570\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
eg\uFF1A
	<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>ProductID<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u6C42\u5E73\u5747\u503C\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u6C42\u548C\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> OrderDetails<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u6A21\u7CCA\u67E5\u627E\uFF1A</p><ul><li><p>The <code>LIKE</code> operator is used in a <code>WHERE</code> clause to search for a specified pattern in a column.</p></li><li><p>There are two wildcards often used in conjunction with the</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>LIKE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>operator:</p><ul><li>The percent sign (%) represents zero, one, or multiple characters</li><li>The underscore sign (_) represents one, single character</li></ul></li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> columnN <span class="token operator">LIKE</span> pattern<span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerName <span class="token operator">LIKE</span> <span class="token string">&#39;a%&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> CustomerName <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">&#39;a%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,20),k=n("p",null,[s("SQL\u901A\u914D\u7B26\uFF08"),n("strong",null,"SQL Wildcard Characters"),s("\uFF09\uFF1A")],-1),v=n("ul",null,[n("li",null,"A wildcard character is used to substitute one or more characters in a string."),n("li",null,[s("Wildcard characters are used with the "),n("code",null,"[LIKE](<https://www.w3schools.com/sql/sql_like.asp>)"),s(" operator. The "),n("code",null,"LIKE"),s(" operator is used in a "),n("code",null,"WHERE"),s(" clause to search for a specified pattern in a column.")])],-1),m={href:"https://www.notion.so/b25ce6aa647a438190fa6e6e039aa680",target:"_blank",rel:"noopener noreferrer"},b=s("Wildcard Characters in SQL Server"),y=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> City <span class="token operator">LIKE</span> <span class="token string">&#39;_ondon&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=a(`<li><p>SQL IN \u64CD\u4F5C\uFF1A</p><ul><li>The <code>IN</code> operator allows you to specify multiple values in a <code>WHERE</code> clause.</li><li>The <code>IN</code> operator is a shorthand for multiple <code>OR</code> conditions.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name <span class="token operator">IN</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
eg\uFF1A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL BETWEEN \u64CD\u4F5C\uFF1A</p><ul><li>The <code>BETWEEN</code> operator selects values within a given range. The values can be numbers, text, or dates.</li><li>The <code>BETWEEN</code> operator is inclusive: begin and end values are included.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name <span class="token operator">BETWEEN</span> value1 <span class="token operator">AND</span> value2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL \u522B\u540D\uFF1A</p><ul><li>An alias only exists for the duration of that query.</li><li>An alias is created with the <code>AS</code> keyword.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name <span class="token keyword">AS</span> alias_name
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name <span class="token keyword">AS</span> alias_name<span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> CustomerID <span class="token keyword">AS</span> ID<span class="token punctuation">,</span> CustomerName <span class="token keyword">AS</span> Customer
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> CustomerName <span class="token keyword">AS</span> Customer<span class="token punctuation">,</span> ContactName <span class="token keyword">AS</span> <span class="token punctuation">[</span>Contact Person<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL JOIN\uFF1A</p><p><img src="https://raw.githubusercontent.com/CoderWDD/myImages/main/blog_images/image-20220523202254943.png" alt="image-20220523202254943" loading="lazy"></p><ul><li><p>\uFF08INNER\uFF09 JOIN\uFF1AReturns records that have matching values in both tables</p><ul><li><strong>Note:</strong> The <code>INNER JOIN</code> keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the &quot;Orders&quot; table that do not have matches in &quot;Customers&quot;, these orders will not be shown!</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name <span class="token operator">=</span> table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>LEFT \uFF08OUTER\uFF09 JOIN\uFF1AReturns all records from the left table, and the matched records from the right table</p><ul><li><strong>Note:</strong> The <code>LEFT JOIN</code> keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name <span class="token operator">=</span> table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>RIGHT \uFF08OUTER\uFF09 JOIN\uFF1AReturns all records from the right table, and the matched records from the left table</p><ul><li><strong>Note:</strong> The <code>RIGHT JOIN</code> keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name <span class="token operator">=</span> table2<span class="token punctuation">.</span>column_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>FULL \uFF08OUTER\uFF09 JOIN\uFF1AReturns all records when there is a match in either left or right table</p><ul><li>The <code>FULL OUTER JOIN</code> keyword returns all records when there is a match in left (table1) or right (table2) table records.</li><li><strong>Note:</strong> The <code>FULL OUTER JOIN</code> keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in &quot;Customers&quot; that do not have matches in &quot;Orders&quot;, or if there are rows in &quot;Orders&quot; that do not have matches in &quot;Customers&quot;, those rows will be listed as well.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>column_name <span class="token operator">=</span> table2<span class="token punctuation">.</span>column_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>SQL GROUP BY\uFF1A</p><ul><li>The <code>GROUP BY</code> statement groups rows that have the same values into summary rows,</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span><span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Customers
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL HAVING Clause\uFF1A</p><ul><li>The <code>HAVING</code> clause was added to SQL because the <code>WHERE</code> keyword cannot be used with aggregate functions.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">HAVING</span> condition
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span><span class="token punctuation">,</span> Country
<span class="token keyword">FROM</span> Customers
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL EXISTS \u64CD\u4F5C\uFF1A</p><ul><li>The <code>EXISTS</code> operator is used to test for the existence of any record in a subquery.</li><li>The <code>EXISTS</code> operator returns TRUE if the subquery returns one or more records.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span>
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> SupplierName
<span class="token keyword">FROM</span> Suppliers
<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductName <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> Products<span class="token punctuation">.</span>SupplierID <span class="token operator">=</span> Suppliers<span class="token punctuation">.</span>supplierID <span class="token operator">AND</span> Price <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL ANY and ALL \u64CD\u4F5C\uFF1A</p><ul><li><p>The <code>ANY</code> and <code>ALL</code> operators allow you to perform a comparison between a single column value and a range of other values.</p></li><li><p>The <code>ANY</code> operator:</p><ul><li>returns a boolean value as a result</li><li>returns TRUE if ANY of the subquery values meet the condition</li><li><code>ANY</code> means that the condition will be true if the operation is true for <strong>any</strong> of the values in the range.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name operator <span class="token keyword">ANY</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name
  <span class="token keyword">FROM</span> table_name
  <span class="token keyword">WHERE</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>The <code>ALL</code> operator:</p><ul><li>returns a boolean value as a result</li><li>returns TRUE if ALL of the subquery values meet the condition</li><li>is used with <code>SELECT</code>, <code>WHERE</code> and <code>HAVING</code> statements</li><li><code>ALL</code> means that the condition will be true only if the operation is true for <strong>all</strong> values in the range.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">ALL</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>SQL SELECT INTO \uFF1A</p><ul><li>The <code>SELECT INTO</code> statement copies data from one table into a new table.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">INTO</span> newtable <span class="token punctuation">[</span><span class="token operator">IN</span> externaldb<span class="token punctuation">]</span>
<span class="token keyword">FROM</span> oldtable
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> CustomersBackup2017
<span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL INSERT INTO SELECT \uFF1A</p><ul><li>The <code>INSERT INTO SELECT</code> statement copies data from one table and inserts it into another table.</li><li>The <code>INSERT INTO SELECT</code> statement requires that the data types in source and target tables match.The <code>INSERT INTO SELECT</code> statement requires that the data types in source and target tables match.</li><li><strong>Note:</strong> The existing records in the target table are unaffected.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table2
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table1
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers <span class="token punctuation">(</span>CustomerName<span class="token punctuation">,</span> City<span class="token punctuation">,</span> Country<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> SupplierName<span class="token punctuation">,</span> City<span class="token punctuation">,</span> Country <span class="token keyword">FROM</span> Suppliers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL CASE\uFF1A</p><ul><li>The <code>CASE</code> statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the <code>ELSE</code> clause.</li><li>If there is no <code>ELSE</code> part and no conditions are true, it returns NULL.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CASE</span>
    <span class="token keyword">WHEN</span> condition1 <span class="token keyword">THEN</span> result1
    <span class="token keyword">WHEN</span> condition2 <span class="token keyword">THEN</span> result2
    <span class="token keyword">WHEN</span> conditionN <span class="token keyword">THEN</span> resultN
    <span class="token keyword">ELSE</span> result
<span class="token keyword">END</span><span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">SELECT</span> OrderID<span class="token punctuation">,</span> Quantity<span class="token punctuation">,</span>
<span class="token keyword">CASE</span>
    <span class="token keyword">WHEN</span> Quantity <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">&#39;The quantity is greater than 30&#39;</span>
    <span class="token keyword">WHEN</span> Quantity <span class="token operator">=</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">&#39;The quantity is 30&#39;</span>
    <span class="token keyword">ELSE</span> <span class="token string">&#39;The quantity is under 30&#39;</span>
<span class="token keyword">END</span> <span class="token keyword">AS</span> QuantityText
<span class="token keyword">FROM</span> OrderDetails<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL NULL Funtions\uFF1A <strong>IFNULL(), ISNULL(), COALESCE(), and NVL() Functions</strong></p><ul><li>The function lets you return an alternative value if an expression is NULL:</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> UnitPrice <span class="token operator">*</span> <span class="token punctuation">(</span>UnitsInStock <span class="token operator">+</span> IFNULL<span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> UnitPrice <span class="token operator">*</span> <span class="token punctuation">(</span>UnitsInStock <span class="token operator">+</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span> UnitPrice <span class="token operator">*</span> <span class="token punctuation">(</span>UnitsInStock <span class="token operator">+</span> ISNULL<span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL BACKUP DATABASE\uFF1A</p><ul><li><p>The <code>BACKUP DATABASE</code> statement is used in SQL Server to create a full back up of an existing SQL database.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BACKUP</span> <span class="token keyword">DATABASE</span> databasename
<span class="token keyword">TO</span> <span class="token keyword">DISK</span> <span class="token operator">=</span> <span class="token string">&#39;filepath&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>A differential back up only backs up the parts of the database that have changed since the last full database backup.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BACKUP</span> <span class="token keyword">DATABASE</span> databasename
<span class="token keyword">TO</span> <span class="token keyword">DISK</span> <span class="token operator">=</span> <span class="token string">&#39;filepath&#39;</span>
<span class="token keyword">WITH</span> DIFFERENTIAL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>SQL Constraints\uFF1A</p><ul><li><p>\u2022 NOT NULL\uFF1AEnsures that a column cannot have a NULL value</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Persons <span class="token punctuation">(</span>
    ID <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    LastName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    FirstName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    Age <span class="token keyword">int</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">MODIFY</span> Age <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>UNIQUE\uFF1AEnsures that all values in a column are different</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Persons <span class="token punctuation">(</span>
    ID <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    LastName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    FirstName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Age <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> UC_Person<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>PRIMARY KEY\uFF1AA combination of a <code>NOT NULL</code> and <code>UNIQUE</code>. Uniquely identifies each row in a table</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Persons <span class="token punctuation">(</span>
    ID <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    LastName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    FirstName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Age <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>FOREIGN KEY\uFF1APrevents actions that would destroy links between tables</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Orders <span class="token punctuation">(</span>
    OrderID <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    OrderNumber <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    PersonID <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>OrderID<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>PersonID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Persons<span class="token punctuation">(</span>PersonID<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Orders
<span class="token keyword">ADD</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>PersonID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Persons<span class="token punctuation">(</span>PersonID<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Orders
<span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> FK_PersonOrder<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>CHECK\uFF1AEnsures that the values in a column satisfies a specific condition</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Persons <span class="token punctuation">(</span>
    ID <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    LastName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    FirstName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Age <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>Age<span class="token operator">&gt;=</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">ADD</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>Age<span class="token operator">&gt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">DROP</span> <span class="token keyword">CHECK</span> CHK_PersonAge<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>DEFAULT\uFF1ASets a default value for a column if no value is specified</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Persons <span class="token punctuation">(</span>
    ID <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    LastName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    FirstName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Age <span class="token keyword">int</span><span class="token punctuation">,</span>
    City <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;Sandnes&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">ALTER</span> City <span class="token keyword">SET</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;Sandnes&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons
<span class="token keyword">ALTER</span> City <span class="token keyword">DROP</span> <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>CREATE INDEX\uFF1AUsed to create and retrieve data from the database very quickly</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name
<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_lastname
<span class="token keyword">ON</span> Persons <span class="token punctuation">(</span>LastName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>SQL AUTO INCREMENT Field\uFF1A</p><ul><li>Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.</li><li>Often this is the primary key field that we would like to be created automatically every time a new record is inserted.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Persons <span class="token punctuation">(</span>
    Personid <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    LastName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    FirstName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Age <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Personid<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

eg\uFF1A
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Persons <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SQL Date Data Types\uFF1A</p><ul><li>DATE\uFF1Aformat YYYY-MM-DD</li><li>DATETIME\uFF1Aformat: YYYY-MM-DD HH:MI:SS</li><li>TIMESTAMP\uFF1Aformat: YYYY-MM-DD HH:MI:SS</li><li>YEAR\uFF1Aformat YYYY or YY</li></ul></li>`,16),E=n("h2",{id:"\u53C2\u8003\u8D44\u6599",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u53C2\u8003\u8D44\u6599","aria-hidden":"true"},"#"),s(" \u53C2\u8003\u8D44\u6599")],-1),g={href:"https://www.w3schools.com/mysql/default.asp",target:"_blank",rel:"noopener noreferrer"},h=s("w3schools\u5173\u4E8EMySql\u7684\u6559\u7A0B");function T(L,N){const e=o("ExternalLinkIcon");return p(),i(c,null,[d,n("ul",null,[u,n("li",null,[k,v,n("p",null,[n("a",m,[b,t(e)])]),y]),w]),E,n("p",null,[n("a",g,[h,t(e)])])],64)}var S=l(r,[["render",T],["__file","SQL.html.vue"]]);export{S as default};
