import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as t,c as o,a as n,d as c,b as s,e as i}from"./app.4c65187c.js";const l={},u=n("h2",{id:"\u539F\u9898",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u539F\u9898","aria-hidden":"true"},"#"),s(" \u539F\u9898")],-1),r=n("h3",{id:"\u94FE\u63A5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u94FE\u63A5","aria-hidden":"true"},"#"),s(" \u94FE\u63A5")],-1),k={href:"https://leetcode.cn/problems/different-ways-to-add-parentheses/",target:"_blank",rel:"noopener noreferrer"},d=s("Leetcode-241 \u4E3A\u8FD0\u7B97\u8868\u8FBE\u5F0F\u8BBE\u8BA1\u4F18\u5148\u7EA7"),v=i(`<h3 id="\u9898\u610F" tabindex="-1"><a class="header-anchor" href="#\u9898\u610F" aria-hidden="true">#</a> \u9898\u610F</h3><ul><li><p>\u7ED9\u4F60\u4E00\u4E2A\u7531\u6570\u5B57\u548C\u8FD0\u7B97\u7B26\u7EC4\u6210\u7684\u5B57\u7B26\u4E32 <code>expression</code> \uFF0C\u6309\u4E0D\u540C\u4F18\u5148\u7EA7\u7EC4\u5408\u6570\u5B57\u548C\u8FD0\u7B97\u7B26\uFF0C\u8BA1\u7B97\u5E76\u8FD4\u56DE\u6240\u6709\u53EF\u80FD\u7EC4\u5408\u7684\u7ED3\u679C\u3002\u4F60\u53EF\u4EE5 <strong>\u6309\u4EFB\u610F\u987A\u5E8F</strong> \u8FD4\u56DE\u7B54\u6848\u3002</p></li><li><p>\u751F\u6210\u7684\u6D4B\u8BD5\u7528\u4F8B\u6EE1\u8DB3\u5176\u5BF9\u5E94\u8F93\u51FA\u503C\u7B26\u5408 32 \u4F4D\u6574\u6570\u8303\u56F4\uFF0C\u4E0D\u540C\u7ED3\u679C\u7684\u6570\u91CF\u4E0D\u8D85\u8FC7 <code>10&lt;sup&gt;4&lt;/sup&gt; </code>\u3002</p></li></ul><h3 id="\u63D0\u793A" tabindex="-1"><a class="header-anchor" href="#\u63D0\u793A" aria-hidden="true">#</a> \u63D0\u793A</h3><ul><li><code>1 &lt;= expression.length &lt;= 20</code></li><li><code>expression</code> \u7531\u6570\u5B57\u548C\u7B97\u7B26 <code>&#39;+&#39;</code>\u3001<code>&#39;-&#39;</code> \u548C <code>&#39;*&#39;</code> \u7EC4\u6210\u3002</li><li>\u8F93\u5165\u8868\u8FBE\u5F0F\u4E2D\u7684\u6240\u6709\u6574\u6570\u503C\u5728\u8303\u56F4 <code>[0, 99] </code></li></ul><h3 id="\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B" aria-hidden="true">#</a> \u793A\u4F8B</h3><ul><li><p>\u793A\u4F8B\u4E00\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aexpression = &quot;2-1-1&quot;
\u8F93\u51FA\uFF1A[0,2]
\u89E3\u91CA\uFF1A
((2-1)-1) = 0 
(2-(1-1)) = 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u793A\u4F8B\u4E8C\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aexpression = &quot;2*3-4*5&quot;
\u8F93\u51FA\uFF1A[-34,-14,-10,-10,10]
\u89E3\u91CA\uFF1A
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u5206\u6790" aria-hidden="true">#</a> \u5206\u6790</h2><ul><li>\u81EA\u7531\u7EC4\u5408\u8FD0\u7B97\u987A\u5E8F\uFF0C\u5176\u5B9E\u5C31\u662F\u5C06\u8FD0\u7B97\u7B26\u4F5C\u4E3A\u5206\u5272\uFF0C\u7136\u540E\u5206\u522B\u5BF9\u5176\u5DE6\u53F3\u4E24\u8FB9\u8FDB\u884C\u6C42\u89E3\uFF0C\u672C\u8D28\u4E0A\u5C31\u662F <strong>\u5206\u6CBB</strong> \u7684\u601D\u60F3</li><li>\u6240\u4EE5\uFF0C\u53EF\u4EE5\u679A\u4E3E\u6BCF\u4E00\u4E2A\u8FD0\u7B97\u7B26\uFF0C\u7136\u540E\u5206\u522B\u5229\u7528 <code>diffWaysToCompute(expression)</code> \u8FDB\u884C\u6C42\u89E3\uFF0C\u56E0\u4E3A <code>diffWaysToCompute(expression)</code> \u7684\u5B9A\u4E49\u5C31\u662F\u5BF9\u8868\u8FBE\u5F0F <code>expression</code> \u8FDB\u884C\u6C42\u89E3</li><li>\u6C42\u89E3\u7684\u8FC7\u7A0B\u4E2D\u9700\u8981\u6CE8\u610F\uFF0C\u5BF9\u4E8E\u53EA\u6709\u64CD\u4F5C\u6570\uFF0C\u800C\u6CA1\u6709\u8FD0\u7B97\u7B26\u7684\u8868\u8FBE\u5F0F\uFF0C\u5219\u8BE5\u8868\u8FBE\u5F0F\u5C31\u662F\u5176\u64CD\u4F5C\uFF0C\u5982 <code>expression</code> \u4E3A<code>[2]</code> \u65F6\uFF0C\u5176\u8FD0\u7B97\u7ED3\u679C\u5C31\u4E3A 2</li><li>\u56E0\u4E3A\u5BF9\u8868\u8FBE\u5F0F\u7684\u6C42\u89E3\u8FC7\u7A0B\u4E2D\uFF0C\u53EF\u80FD\u5B58\u5728\u540C\u6837\u7684 <code>expression</code> \uFF0C\u6240\u4EE5\u53EF\u4EE5\u5229\u7528 <code>memoization</code> \u7684\u65B9\u6CD5\uFF0C\u5BF9\u6C42\u89E3\u8FC7\u7684 <code>expression</code> \u8FDB\u884C\u4FDD\u5B58\uFF0C\u5F53\u518D\u6B21\u9047\u5230\u76F8\u540C\u7684 <code>expression</code> \u65F6\uFF0C\u5C31\u4E0D\u7528\u518D\u6B21\u8FDB\u884C\u6C42\u89E3\u4E86</li><li><code>memoization</code> \u7684\u65F6\u5019\uFF0C\u53EF\u4EE5\u7528 <code>Map</code> \u8FDB\u884C\u4FDD\u5B58\uFF0C\u56E0\u4E3A\u5176\u67E5\u627E\u65F6\u95F4\u590D\u6742\u5EA6\u8DB3\u591F\u4F18\u79C0</li></ul><h2 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BA1\u7B97\u4E00\u4E2A\u8868\u8FBE\u5F0F\u7684\u503C</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5982\u679C\u8BE5\u8868\u8FBE\u5F0F\u4E4B\u524D\u5DF2\u7ECF\u8BA1\u7B97\u8FC7\u4E86</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BA1\u7B97\u51FA\u64CD\u4F5C\u6570</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isOperation</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> expression<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> partRes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u5982\u679C\u8868\u8FBE\u5F0F\u4E2D\u6CA1\u6709\u8FD0\u7B97\u7B26\uFF0C\u53EA\u6709\u6570\u5B57\uFF0C\u5219\u76F4\u63A5\u8FDBmap\uFF0C\u5E76\u8FD4\u56DE\u5373\u53EF</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            partRes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span>partRes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> partRes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u904D\u5386\u6BCF\u4E00\u4E2A\u5B57\u7B26\uFF0C\u4EE5\u8FD0\u7B97\u7B26\u4E3A\u5206\u5272\uFF0C\u5206\u522B\u8BA1\u7B97\u8FD0\u7B97\u7B26\u4E24\u8FB9\u7684\u7ED3\u679C</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOperation</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">char</span> operation <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res1 <span class="token operator">=</span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res2 <span class="token operator">=</span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token operator">:</span> res1<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num2 <span class="token operator">:</span> res2<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        partRes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">cal</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5C06\u5F53\u524D\u8868\u8FBE\u5F0F\u7684\u7ED3\u679C\u4FDD\u5B58\uFF0C\u540E\u9762\u518D\u8BA1\u7B97\u5230\u7684\u65F6\u5019\u5C31\u4E0D\u7528\u518D\u8BA1\u7B97\u4E86</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span>partRes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> partRes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">char</span> operation<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span> <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span> <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span> <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">isOperation</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function m(b,h){const a=p("ExternalLinkIcon");return t(),o("div",null,[u,r,n("p",null,[n("a",k,[d,c(a)])]),v])}var g=e(l,[["render",m],["__file","Leetcode-241.html.vue"]]);export{g as default};
